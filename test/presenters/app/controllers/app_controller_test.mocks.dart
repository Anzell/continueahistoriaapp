// Mocks generated by Mockito 5.1.0 from annotations
// in continueahistoriaapp/test/presenters/app/controllers/app_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:continueahistoriaapp/core/failures/failures.dart' as _i6;
import 'package:continueahistoriaapp/core/usecases/future_usecases.dart' as _i7;
import 'package:continueahistoriaapp/domain/repositories/server_repository.dart'
    as _i2;
import 'package:continueahistoriaapp/domain/usecases/server/listen_server_failures.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeServerRepository_0 extends _i1.Fake implements _i2.ServerRepository {
}

/// A class which mocks [ListenServerFailuresUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockListenServerFailuresUsecase extends _i1.Mock
    implements _i3.ListenServerFailuresUsecase {
  MockListenServerFailuresUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ServerRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeServerRepository_0()) as _i2.ServerRepository);
  @override
  _i4.Stream<_i5.Either<_i6.Failure, _i6.ReceivedServerFailure>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Stream<
                  _i5.Either<_i6.Failure, _i6.ReceivedServerFailure>>.empty())
          as _i4.Stream<_i5.Either<_i6.Failure, _i6.ReceivedServerFailure>>);
}
